callbacks and promises are primarily used for HANDLING ASYNCRONOUS OPERATIONS 
closure are not directly related to asynchronous operations but are a for managing scope and encapsulation.

Overall: 
Callbacks:
Its a pattern in JavaScript for handling asynchronous operations. A callback is a function that is passed as an argument 
to another function and is invoked once a specific operation or task is completed. The callback allows you to specify the behavior that should occur after the asynchronous operation finishes.

Callbacks can be error-prone, They can lead to callback hell or the pyramid of doom, where multiple nested callbacks make the code difficult to read and maintain

Promises: 
Its a modern approch for handling asynchronous operations.A promise represents a future value or result of an asynchronous operation. 
It provides a cleaner and more structured way to handle asynchronous code compared to callbacks.

A promise can be in one of three states: pending, fulfilled, or rejected. When an asynchronous operation completes, 
a promise can either be resolved with a value (fulfilled) or rejected with a reason (error). .then(), .catch(), making the code more 
readable and avoiding callback hell.

Closures: 
A closure is a fundamental concept in JavaScript that allows a function to retain access to variables from its outer (enclosing) 
scope even after the outer function has finished executing.  It's created when an inner function references variables or functions 
from its outer scope and is returned or passed as a reference to another part of the code.

Closures are primarily used for encapsulation, data privacy, and maintaining access to variables within a specific scope.